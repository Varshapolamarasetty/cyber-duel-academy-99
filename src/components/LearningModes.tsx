
import React, { useState } from 'react';
import GlitchText from './GlitchText';
import { Bot, Users, Flag, Play } from 'lucide-react';

const LearningModes = () => {
  const [activeTab, setActiveTab] = useState(0);
  
  const tabs = [
    {
      id: 'ai-vs-player',
      title: 'AI vs. Player',
      icon: <Bot size={18} />,
      description: 'Challenge our adaptive AI in hacking or defending scenarios. The AI will learn your strategies and adapt its tactics in real-time to provide an increasingly challenging experience.',
      features: [
        'Adaptive difficulty based on your skill level',
        'AI opponents with different hacking or defending styles',
        'Real-time strategy adjustments by the AI',
        'Detailed feedback on your performance against AI tactics'
      ],
      image: 'https://images.unsplash.com/photo-1558494949-ef010cbdcc31?auto=format&fit=crop&q=80&w=2034'
    },
    {
      id: 'co-op',
      title: 'Co-op AI Guide',
      icon: <Users size={18} />,
      description: 'Team up with friends while our AI provides real-time guidance and feedback. Solve cybersecurity challenges together and learn collaborative defense and attack strategies.',
      features: [
        'Multiplayer collaboration on complex challenges',
        'AI providing hints when your team gets stuck',
        'Role-based learning with specialized tasks',
        'Team performance analysis and improvement suggestions'
      ],
      image: 'https://images.unsplash.com/photo-1586473219010-2ffc57b0d282?auto=format&fit=crop&q=80&w=1964'
    },
    {
      id: 'ctf',
      title: 'AI-Generated CTF',
      icon: <Flag size={18} />,
      description: 'Participate in Capture The Flag challenges dynamically generated by our AI. Each challenge is unique and tailored to test specific cybersecurity skills at your current level.',
      features: [
        'Personalized CTF challenges based on your skill profile',
        'Progressive difficulty with incremental learning',
        'Wide variety of challenge types (crypto, web, forensics, etc.)',
        'Real-world scenarios with practical applications'
      ],
      image: 'https://images.unsplash.com/photo-1525547719571-a2d4ac8945e2?auto=format&fit=crop&q=80&w=1964'
    },
    {
      id: 'scenarios',
      title: 'Animated Scenarios',
      icon: <Play size={18} />,
      description: 'Watch and interact with animated cybersecurity scenarios that visually explain how attacks and defenses work. See the technical details unfold through engaging visualizations.',
      features: [
        'Step-by-step visual breakdowns of cyber attacks',
        'Interactive points where you make critical decisions',
        'Real-time visualization of security principles',
        'Before/after comparisons of secure vs. vulnerable systems'
      ],
      image: 'https://images.unsplash.com/photo-1517433367423-c7e5b0f35086?auto=format&fit=crop&q=80&w=1980'
    }
  ];
  
  const currentTab = tabs[activeTab];
  
  return (
    <section 
      id="learning-modes"
      className="py-24 relative overflow-hidden"
    >
      {/* Background grid effect */}
      <div className="absolute inset-0 cyber-bg opacity-20"></div>
      
      <div className="container mx-auto px-6 relative z-10">
        <div className="text-center mb-16">
          <div className="inline-block bg-cyber-neon/10 px-3 py-1 rounded-full text-cyber-neon text-sm mb-4 terminal-text border border-cyber-neon/30">
            Multiple Game Modes
          </div>
          <h2 className="text-3xl md:text-4xl font-bold mb-4 cyber-heading">
            <GlitchText text="Gamified" className="text-cyber-red" /> Learning Modes
          </h2>
          <p className="text-cyber-muted-text max-w-2xl mx-auto">
            Choose how you want to learn cybersecurity with our diverse AI-powered game modes. Each mode offers a unique approach to mastering security skills.
          </p>
        </div>
        
        {/* Tabs */}
        <div className="flex flex-wrap justify-center mb-8 space-x-2">
          {tabs.map((tab, index) => (
            <button
              key={tab.id}
              className={`flex items-center space-x-2 px-4 py-2 rounded-full mb-2 transition-all duration-200 terminal-text text-sm ${
                activeTab === index 
                  ? 'bg-cyber-card-bg border border-cyber-neon/30 text-cyber-neon' 
                  : 'text-cyber-muted-text hover:text-white hover:bg-cyber-background-alt'
              }`}
              onClick={() => setActiveTab(index)}
            >
              {tab.icon}
              <span>{tab.title}</span>
            </button>
          ))}
        </div>
        
        {/* Selected tab content */}
        <div className="grid md:grid-cols-2 gap-10 items-center">
          {/* Feature details */}
          <div>
            <div className="cyber-card p-6">
              <h3 className="text-2xl font-bold mb-4 cyber-heading">{currentTab.title}</h3>
              <p className="text-cyber-muted-text mb-6">{currentTab.description}</p>
              
              <div className="mb-6">
                <h4 className="text-white font-medium mb-3 terminal-text">Key Features</h4>
                <ul className="space-y-3">
                  {currentTab.features.map((feature, index) => (
                    <li key={index} className="flex">
                      <span className="text-cyber-neon mr-2">â†’</span>
                      <span className="text-cyber-muted-text">{feature}</span>
                    </li>
                  ))}
                </ul>
              </div>
              
              <button className="cyber-button-primary w-full sm:w-auto">
                TRY THIS MODE
              </button>
            </div>
          </div>
          
          {/* Visual preview */}
          <div>
            <div className="cyber-card p-1 overflow-hidden shadow-xl">
              <div className="relative aspect-video overflow-hidden rounded-lg">
                <img 
                  src={currentTab.image}
                  alt={currentTab.title}
                  className="w-full h-full object-cover"
                />
                
                {/* Overlay with scan effect */}
                <div className="absolute inset-0 bg-gradient-to-b from-cyber-background/30 to-cyber-background/70">
                  <div className="absolute inset-0 bg-cyber-grid bg-[length:20px_20px] opacity-20"></div>
                  <div className="h-px w-full bg-cyber-neon/30 absolute animate-scan-line"></div>
                </div>
                
                {/* Play button */}
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="relative">
                    <div className="absolute inset-0 bg-cyber-background/50 backdrop-blur-sm rounded-full transform scale-150"></div>
                    <button className="relative z-10 w-16 h-16 flex items-center justify-center rounded-full bg-cyber-neon text-cyber-background hover:bg-cyber-neon/90 transition-colors">
                      <Play size={24} fill="currentColor" />
                    </button>
                  </div>
                </div>
                
                {/* Mode tag */}
                <div className="absolute top-4 left-4 bg-cyber-background/70 backdrop-blur-sm px-3 py-1 rounded text-cyber-neon text-sm border border-cyber-neon/30 terminal-text">
                  {currentTab.title} Mode
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default LearningModes;
